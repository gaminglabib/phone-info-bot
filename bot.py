import logging
import aiohttp
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
BOT_TOKEN = "7921673777:AAH5GqPcew87tpTJQNwpQEt24gkld-QiEg0"

# ‚úÖ ‡¶´‡ßç‡¶∞‡¶ø API ‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤ (numverify demo API)
API_KEY = "e6d5e63c2cfd316ae203d62c6cc07d8e"  # demo key
API_URL = "http://apilayer.net/api/validate"

# ‚úÖ ‡¶≤‡¶ó ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚úÖ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"‡¶™‡ßç‡¶∞‡¶ø‡ßü {user.first_name}, Toxic Digonto ‡¶è‡¶∞ ‡¶¨‡¶ü-‡¶è ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶®‡¶´‡ßã ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡•§\n"
        "‡¶§‡ßÅ‡¶Æ‡¶ø /phone <number> ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /phone +8801712345678"
    )

# ‚úÖ /phone ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def phone_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßã‡•§\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /phone +8801712345678")
        return

    phone_number = context.args[0]
    await update.message.reply_text(f"{phone_number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...")

    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "access_key": API_KEY,
                "number": phone_number,
                "format": 1
            }
            async with session.get(API_URL, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get("valid"):
                        response_message = f"üì± ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: {data.get('international_format', phone_number)}\n"
                        response_message += f"üåç ‡¶¶‡ßá‡¶∂: {data.get('country_name', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}\n"
                        response_message += f"üìû ‡¶ï‡ßã‡¶°: +{data.get('country_code', '')}\n"
                        response_message += f"üì° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡¶æ‡¶∞: {data.get('carrier', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}\n"
                        response_message += f"üõ∞Ô∏è ‡¶≤‡¶æ‡¶á‡¶® ‡¶ü‡¶æ‡¶á‡¶™: {data.get('line_type', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}"
                        await update.message.reply_text(response_message)
                    else:
                        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
                else:
                    await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    except Exception as e:
        logger.error(f"Error fetching phone info: {e}")
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# ‚úÖ /ping ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ Pong! ‡¶¨‡¶ü ‡¶∏‡¶ö‡¶≤ ‡¶Ü‡¶õ‡ßá‡•§")

# ‚úÖ main runner
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("phone", phone_info))
    app.add_handler(CommandHandler("ping", ping))

    print("‚úÖ Bot started...")
    app.run_polling()
