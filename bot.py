import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import aiohttp

# ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
BOT_TOKEN = "7921673777:AAH5GqPcew87tpTJQNwpQEt24gkld-QiEg0"

# ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ numverify API key ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
API_KEY = "09f5db7c22b7491c8f92ba7c87d619cb"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"‡¶™‡ßç‡¶∞‡¶ø‡ßü {user.first_name}, Toxic Digonto ‡¶è‡¶∞ ‡¶¨‡¶ü-‡¶è ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§\n"
        "‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶®‡¶´‡ßã ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡•§\n"
        "‡¶§‡ßÅ‡¶Æ‡¶ø /phone <number> ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§\n"
        "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /phone +8801712345678\n\n"
        "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì‡•§"
    )

async def phone_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text(
            "‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßã ‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡•§\n"
            "‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /phone +8801712345678"
        )
        return

    phone_number = context.args[0]

    # ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á + ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï
    if not phone_number.startswith("+"):
        await update.message.reply_text(
            "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§\n"
            "‡¶Ø‡ßá‡¶Æ‡¶®: +8801712345678"
        )
        return

    await update.message.reply_text(f"{phone_number} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...")

    url = f"http://apilayer.net/api/validate?access_key={API_KEY}&number={phone_number}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()

                    if data.get("valid"):
                        country = data.get("country_name", "‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á")
                        location = data.get("location", "‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á")
                        carrier = data.get("carrier", "‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á")
                        line_type = data.get("line_type", "‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á")

                        response_message = (
                            f"üìû ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: {phone_number}\n"
                            f"üåç ‡¶¶‡ßá‡¶∂: {country}\n"
                            f"üìå ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®: {location}\n"
                            f"üì° ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞: {carrier}\n"
                            f"üì± ‡¶ü‡¶æ‡¶á‡¶™: {line_type}"
                        )
                        await update.message.reply_text(response_message)
                    else:
                        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
                else:
                    await update.message.reply_text("‚ö†Ô∏è ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    except Exception as e:
        logger.error(f"Error fetching phone info: {e}")
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Pong! ‡¶¨‡¶ü ‡¶∏‡¶ö‡¶≤ ‡¶Ü‡¶õ‡ßá‡•§")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("phone", phone_info))
    app.add_handler(CommandHandler("ping", ping))

    print("Bot started...")
    app.run_polling()
